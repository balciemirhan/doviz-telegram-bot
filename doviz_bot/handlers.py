# handlers.py
# <-- KullanÄ±cÄ±dan gelen tÃ¼m komut ve butonlarÄ± karÅŸÄ±lar.
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

# Kendi modÃ¼llerimizi "bu klasÃ¶rÃ¼n iÃ§inden" diye belirtiyoruz
from . import constants as c
from . import keyboards
from . import data_fetcher
from . import nlp_processor


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """/start komutu verildiÄŸinde kullanÄ±cÄ±yÄ± karÅŸÄ±lar."""
    user = update.effective_user
    await update.message.reply_markdown_v2(
        f"Merhaba {user.mention_markdown_v2()}\\! ğŸ‘‹\n\nGÃ¼ncel piyasa verileri iÃ§in aÅŸaÄŸÄ±daki menÃ¼yÃ¼ kullanabilirsiniz\\.",
        reply_markup=keyboards.create_persistent_keyboard(),
    )


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """KullanÄ±cÄ±dan gelen tÃ¼m metin mesajlarÄ±nÄ± iÅŸler."""
    text = update.message.text

    # --- YENÄ° EKLENEN NLP KONTROLÃœ ---
    # 1. Ã–nce gelen mesajÄ±n iÃ§inde bir Ã¼rÃ¼n var mÄ± diye NLP beynimize soralÄ±m.
    item_code = nlp_processor.find_item_in_text(text)

    if item_code:
        # EÄŸer bir Ã¼rÃ¼n bulunduysa, direkt fiyatÄ±nÄ± gÃ¶sterelim.
        price_data = data_fetcher.get_market_data(data_code=item_code)
        await update.message.reply_text(
            text=price_data, parse_mode=ParseMode.MARKDOWN_V2
        )
        return  # Fonksiyonu burada bitir, aÅŸaÄŸÄ±ya devam etmesin.
    # --- NLP KONTROLÃœ SONU ---

    # 2. EÄŸer NLP bir ÅŸey bulamadÄ±ysa, kalÄ±cÄ± klavye butonlarÄ±na basÄ±lmÄ±ÅŸ mÄ± diye kontrol edelim.
    elif text == c.BTN_DOVIZ:
        await update.message.reply_text(
            "LÃ¼tfen bir dÃ¶viz kuru seÃ§in:",
            reply_markup=keyboards.create_doviz_menu_keyboard(),
        )
    elif text == c.BTN_MADEN:
        await update.message.reply_text(
            "LÃ¼tfen bir maden tÃ¼rÃ¼ seÃ§in:",
            reply_markup=keyboards.create_metal_menu_keyboard(),
        )

    # 3. EÄŸer ikisi de deÄŸilse, kullanÄ±cÄ± alakasÄ±z bir ÅŸey yazmÄ±ÅŸtÄ±r.
    else:
        await update.message.reply_text(
            "AnlayamadÄ±m. LÃ¼tfen aÅŸaÄŸÄ±daki menÃ¼den bir iÅŸlem seÃ§in veya bir Ã¼rÃ¼n adÄ± yazÄ±n (Ã¶rn: 'dolar ne kadar?').",
            reply_markup=keyboards.create_persistent_keyboard(),
        )


async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mesaj iÃ§i (inline) buton tÄ±klamalarÄ±nÄ± yÃ¶netir."""
    query = update.callback_query
    await query.answer()
    choice = query.data

    # MenÃ¼ yÃ¶nlendirmeleri
    if choice == c.CB_MENU_DOVIZ:
        await query.edit_message_text(
            text="LÃ¼tfen bir dÃ¶viz kuru seÃ§in:",
            reply_markup=keyboards.create_doviz_menu_keyboard(),
        )
    elif choice == c.CB_MENU_METAL:
        await query.edit_message_text(
            text="LÃ¼tfen bir maden tÃ¼rÃ¼ seÃ§in:",
            reply_markup=keyboards.create_metal_menu_keyboard(),
        )
    elif choice == c.CB_MENU_ALTIN_CESITLERI:
        await query.edit_message_text(
            text="LÃ¼tfen bir altÄ±n tÃ¼rÃ¼ seÃ§in:",
            reply_markup=keyboards.create_altin_cesitleri_menu_keyboard(),
        )
    # Veri getirme iÅŸlemleri
    else:
        await query.edit_message_text(text="Veriler alÄ±nÄ±yor, lÃ¼tfen bekleyin...")
        price_data = data_fetcher.get_market_data(data_code=choice)

        back_menu = None
        if choice in [c.USD, c.EUR, c.GBP]:
            back_menu = c.CB_MENU_DOVIZ
        elif choice == c.GUMUS:
            back_menu = c.CB_MENU_METAL
        else:
            back_menu = c.CB_MENU_ALTIN_CESITLERI

        await query.edit_message_text(
            text=price_data,
            reply_markup=keyboards.create_back_menu_keyboard(back_menu),
            parse_mode=ParseMode.MARKDOWN_V2,
        )
